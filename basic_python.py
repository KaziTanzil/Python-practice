# -*- coding: utf-8 -*-
"""basic_python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bhD8S-tU09BtwTnYtK5RvGwlWNHe9gLC

# About this notebook
<p style="text-align: justify"> Here, you will learn the basic statements of python and function. Some codes will be given for demonstration. Some other codes, you will do as excercise.</p>

# User Input
"""

a = 15
b=20
c='marks'
print(a)
print(b,c)

a = input()
b= input()
print('value of a=',a)
print('b= ',b)
print(type(a))

a = input('Enter a value: ') # always returns string
print('The given value is ', a)
print('Type of the input is',type(a))

a = int(input('Enter a number: ')) # returns string but converted to int
print('The result is', a+37)
print(type(a))

while True:
  a = input('Enter your Birth Year:')
  if a.isdigit():
    if int(a) >= 1995 and int(a)<=2005:
       print('You are ' + str(2024-int(a)) + ' years old')
       print(2025-int(a))
       break
    else:
      print('Invalid year')
  else:
   print('WRONG INPUT')

"""# if statement
There can be zero or more elif parts, and the else part is optional. The keyword ‘elif’ is short for ‘else if’
"""

# indent
i = int(input('Enter a number '))
if i <= 5: # () not required, {} not required
  print('okay')
  print('fine')
else:
  print('bad')
print('not okay') # will be executed in each run

x = int(input("Please enter an integer: "))
if x < 0:
    x =0
    print('Negative changed to zero')
elif x == 0:
    print('Zero')
elif x == 1:
    print('Single')
else:
  print('More')

"""<b>Exercise 1:</b> Input a course mark (0-100) from user and use the <b>if</b> statement to print corresponding grade."""

# code here
a=input('Enter your mark= ')
while True:
  if a.isdigit():
     if int(a)>=0 and int(a)<=100:
          if int(a)>=90 and int(a)<=100:
            print('Your total mark is =',a,' and Grade is A+')
            break;
          elif int(a)>=85 and int(a)<=89:
            print('Your total mark is =',a,' and Grade is A')
            break;
          elif int(a)>=80 and int(a)<=84:
            print('Your total mark is =',a,' and Grade is B+')
            break;
          elif int(a)>=75 and int(a)<=79:
            print('Your total mark is =',a,' and Grade is B')
            break;
          elif int(a)>=70 and int(a)<=74:
            print('Your total mark is =',a,' and Grade is C+')
            break;
          elif int(a)>=60 and int(a)<=69:
            print('Your total mark is =',a,' and Grade is C')
            break;
          elif int(a)<60:
            print('Your total mark is =',a,' and Grade is F')
            break;
     else:
       print('Marks range is 0-100')
       break;
  else:
    print('Entered input is not a number, try again')
    break;

"""# for statement
<p style="text-align: justify">The for statement in Python differs a bit from what you may be used to in C or C++. Rather than always giving the user the ability to define both the iteration step and halting condition, Python’s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence.</p>
"""

# Measure some strings:
words = ['cat', 'window', 'dhaka','ctg']

for w in words:
    print('the word is:',w)

list(range(20))

list(range(4,15))

list(range(2,17,2))

words = ['cat', 'window', 'dhaka','ctg','ABC']
for i in range(len(words)):
    print('the word is:',words[i])

"""### The range() Function
If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It generates arithmetic progressions:
"""

list(range(3,10,3))

numbers = [1, 56, 78, 8,7]

for n in numbers:
    print(n+10)

list(range(5))

# repeated for 0 to 4
# for(i=0;i<5;i++)
for i in range(0,20,2):
    print(i)

"""<p style="text-align: justify">The given end point is never part of the generated sequence; range(10) generates 10 values, the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the ‘step’):</p>"""

list(range(5, 10))

list(range(0, 10, 3))

list(range(10, 2, -1))

list(range(-10, -101, -30))

numbers = [1, 56, 78, 8,7]
for i in range(len(numbers)):
    print(i, numbers[i])

for i in range(2,100,5):
    print(i,end=',')

"""<b>Exercise 2:</b> Print all the even numbers between 0 to 100 using <b>for loop</b> and <b>range</b>."""

# code here
for i in range(0,101,2):
  print(i,end=',')

country = "bangladesh"
for c in country:
    print(c,end=' ')

"""# Functions
<p style="text-align: justify">The keyword def introduces a function definition. It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented.</p>
"""

from math import sqrt

def is_prime(num):
  if num <= 1:
    return False
  for i in range(2, int(sqrt(num)) + 1):
    if num % i == 0:
      return False
  return True

# Check if a few numbers are prime
numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
for num in numbers:
  if is_prime(num):
    print(num, "is prime")
  else:
    print(num, "is not prime")

def fib(n):    # write Fibonacci series up to n
    lst = [0,1]
    a, b = 0, 1
    while True:
        #print(a, end=' ')
        a, b = b, a+b
        if b < n:
          lst.append(b)
        else:
          break
        #print()
    return lst

# Now call the function we just defined:
r = fib(1000)
print(r)

# define method
def addnumbers(a, b,c): # add numbers and return result
    # logic
    result = a + b + c
    return result

addnumbers(2,23,10)

y = addnumbers('8ppp', '9',' tehbew') # use or call method
print(y)

addnumbers([33,77], [66], [10])

# add list values
def addValues(num):
    sum = 0
    for n in num:
        sum = sum+ n
    return sum

addValues(range(100))

addValues([])

v = [5, 4,12, 7]
addValues(v)

v = [5, 4,12, 7, 5, 4,12, 7, 5, 4,12, 7]
addValues(v)

# method/function
def multiTable(n, r=10):
    for i in range(1,r+1):
        print("{}x{}={}".format(n,i,n*i))

multiTable(8)

multiTable(15)

"""<b>Exercise 3:</b> Define a <b>method/function</b> which will take two lists of numbers and returns a list (sum of two lists)
<p>Example:<br>
    Input: [3,4,5,1] and [6,7,2,8]<br>
    output: [9,11,7,9]</p>

"""

# code here
def addList(list1,list2):
  result = []
  for i in range(len(list1)):
    result.append(list1[i]+list2[i])
  print(result)

list1 = [3,4,5,1]
list2 = [6,7,2,8]
addList(list1,list2)

"""<b> Exercise 4:</b> Write a <b>method</b> which will take the <b>full name</b> as input and return both the first name and last name.
<p>Example:<br>
    Input: Arafat Rahman Sunny<br>
    Output: First name: Arafat, Last name: Sunny</p>

<b> Exercise 4:</b> Write a <b>method</b> which will take the <b>full name</b> as input and return both the first name and last name.
<p>Example:<br>
    Input: Arafat Rahman Sunny<br>
    Output: First name: Arafat, Last name: Sunny</p>
"""

# code here
def split_full_name(full_name):
    name_parts = full_name.split()
    first_name = name_parts[0]
    last_name = name_parts[-1]
    return {'First name: ',first_name, 'Last name: ', last_name}

#code here
full_name = input("Enter your full name: ")
names = split_full_name(full_name)
print("Input:", full_name)
print("Output:  ", names)

"""# Output Formatting (Optional)
Go to the [link](https://docs.python.org/3/tutorial/inputoutput.html#formatted-string-literals) and practice the codes below.
"""

# code here
a=1